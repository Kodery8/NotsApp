/*public class MessageAdapter extends RecyclerView.Adapter<MessageAdapter.ViewHolder>{

    private static final int VIEW_TYPE_MESSAGE_SENT = 1;
    private static final int VIEW_TYPE_MESSAGE_RECEIVED = 2;

    private Context mContext;
    private ArrayList<Message> mMessageList;

    TextView messageText, timeText, nameText;
    //ImageView profileImage;

    public MessageAdapter(Context context, ArrayList<Message> messageList) {
        mContext = context;
        mMessageList = messageList;
        for(int i=0; i<messageList.size(); i++)
            Log.d(TAG, mMessageList.get(0).getText());
    }

    //@Override
    public class ViewHolder extends RecyclerView.ViewHolder {
        ViewHolder(View itemView) {
            super(itemView);
            messageText = (TextView) itemView.findViewById(R.id.text_message_body);
            timeText = (TextView) itemView.findViewById(R.id.text_message_time);
            nameText = (TextView) itemView.findViewById(R.id.text_message_name);
            messageText.setText(mMessageList.get(0).getText());
            //profileImage = (ImageView) itemView.findViewById(R.id.image_message_profile);
            Log.d("hiih", "ViewHolder: AAHASH");
        }
    }

    @Override
    public int getItemCount() {
        return mMessageList.size();
    }



    // Determines the appropriate ViewType according to the sender of the message.
    @Override
    public int getItemViewType(int position) {
        Message message = (Message) mMessageList.get(position);

        /*if (message.getUser().getUserId().equals(S.getCurrentUser().getUserId())) {
            // If the current user is the sender of the message
            return VIEW_TYPE_MESSAGE_SENT;
        } else {
            // If some other user sent the message*/
            return VIEW_TYPE_MESSAGE_RECEIVED;
        //}
    }

    // Inflates the appropriate layout according to the ViewType.

    @Override
    public MessageAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View view;

        /*if (viewType == VIEW_TYPE_MESSAGE_SENT) {
            view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.message_sent, parent, false);
            return new SentMessageHolder(view);
        } else if (viewType == VIEW_TYPE_MESSAGE_RECEIVED) {
            view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.message_received, parent, false);
        Log.d("SHREE", "Aeee Ghussaaa!");
            return new ReceivedMessageHolder(view);
        }

        return null;*/

        Log.d("hihi", "onCreateViewHolder: Entered");
        view = LayoutInflater.from(mContext).inflate(R.layout.message_received, parent, false);
        return new ReceivedMessageHolder(view);
        
    }


    // Passes the message object to a ViewHolder so that the contents can be bound to UI.

    @Override
    public void onBindViewHolder(ViewHolder holder, int position) {
        Message message = (Message) mMessageList.get(position);

        /*switch (holder.getItemViewType()) {
            case VIEW_TYPE_MESSAGE_SENT:
                ((SentMessageHolder) holder).bind(message);
                break;
            case VIEW_TYPE_MESSAGE_RECEIVED:
                ((ReceivedMessageHolder) holder).bind(message);
        }*/

        ((ReceivedMessageHolder) holder).bind(message);
    }

    private class SentMessageHolder extends MessageAdapter.ViewHolder {
        TextView messageText, timeText;

        SentMessageHolder(View itemView) {
            super(itemView);

            messageText = (TextView) itemView.findViewById(R.id.text_message_body);
            timeText = (TextView) itemView.findViewById(R.id.text_message_time);
        }

        void bind(Message message) {
            messageText.setText(message.getText());

            // Format the stored timestamp into a readable String using method.
            timeText.setText(message.getTime());
        }
    }

    private class ReceivedMessageHolder extends MessageAdapter.ViewHolder {
        TextView messageText, timeText, nameText;
        ImageView profileImage;

        ReceivedMessageHolder(View itemView) {
            super(itemView);

            messageText = (TextView) itemView.findViewById(R.id.text_message_body);
            timeText = (TextView) itemView.findViewById(R.id.text_message_time);
            nameText = (TextView) itemView.findViewById(R.id.text_message_name);
            //profileImage = (ImageView) itemView.findViewById(R.id.image_message_profile);
        }

        void bind(Message message) {

            Log.d("hihi", "bind: Tan Tana Tan");
            messageText.setText(message.getText());

            // Format the stored timestamp into a readable String using method.
            timeText.setText(message.getTime());

            nameText.setText(message.getUser());

            // Insert the profile image from the URL into the ImageView.
            //Utils.displayRoundImageFromUrl(mContext, message.getSender().getProfileUrl(), profileImage);
        }
    }
}*/

